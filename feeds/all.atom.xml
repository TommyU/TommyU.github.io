<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tommy de blog</title><link href="http://tommyu.github.io/" rel="alternate"></link><link href="http://tommyu.github.io/feeds/all.atom.xml" rel="self"></link><id>http://tommyu.github.io/</id><updated>2016-01-05T20:20:00+08:00</updated><entry><title>github 博客搭建过程</title><link href="http://tommyu.github.io/how-to-setup-github-blog.html" rel="alternate"></link><updated>2016-01-05T20:20:00+08:00</updated><author><name>Tommy</name></author><id>tag:tommyu.github.io,2016-01-05:how-to-setup-github-blog.html</id><summary type="html">&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;h2&gt;github帐号&lt;/h2&gt;
&lt;p&gt;注册帐号， 然后依照这个&lt;a href="https://pages.github.com/"&gt;指引&lt;/a&gt;创建一个新的仓库，注意命名（&lt;em&gt;username&lt;/em&gt;.github.io）;&lt;/p&gt;
&lt;h2&gt;pelican&lt;/h2&gt;
&lt;p&gt;这是一个基于python2.7(及以上)的静态页生成工具。注意，是静态页。github博客貌似只支持静态页。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建网站路径，并初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir my_blog
cd my_blog
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样子就会在my_blog路径下敏初始化网站的静态页面结构（初始版），结构如下： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── content  
├── develop_server.sh  
├── fabfile.py  
├── Makefile  
├── output  
├── pelicanconf.py  
└── publishconf.py  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，在生成向导中选择好自己的github域名，即:What is your URL prefix? (see above example; &lt;strong&gt;no trailing slash&lt;/strong&gt;) http://&lt;em&gt;username&lt;/em&gt;.github.io 。
同时： Do you want to upload your website using GitHub Pages? (y/N) Y&lt;/p&gt;
&lt;p&gt;pelicanconf.py为配置文件。&lt;br /&gt;
content为markdown文件所存放的路径。&lt;br /&gt;
output为实际生成静态html项目的路径。  &lt;/p&gt;
&lt;h2&gt;pelican-themes&lt;/h2&gt;
&lt;p&gt;pelican搭配使用的主题，大多基于bootstrap进行一定的定制，可以根据喜好选择&lt;a href="http://www.pelicanthemes.com/"&gt;相应的风格&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载并注册主题&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ../
git clone https://github.com/getpelican/pelican-themes.git
cd pelican-themes
pelican-themes -i pelican-bootstrap3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启用主题，编辑上面的pelicanconf.py文件， 添加以下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;THEME=&amp;#39;pelican-bootstrap3&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;创建第一个页面&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ../my_blog/content
vi hello.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加以下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存，退出编辑。&lt;/p&gt;
&lt;p&gt;执行以下指令生成html,并运行本地的服务（可以在http://localhost:8000查看效果）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ../
pelican content/
cd output
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;上传代码到github对应的仓库&lt;/h1&gt;
&lt;p&gt;下载仓库代码(注意username的替换）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@github.com:username/username.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在生成html后， output目录结构（只到3层），如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── output  
│   ├── archives.html  
│   ├── author  
│   │   └── your-name.html  
│   ├── authors.html  
│   ├── categories.html  
│   ├── category  
│   │   └── markdown.html  
│   ├── index.html  
│   ├── my-super-post.html  
│   ├── tag  
│   │   └── markdown.html  
│   ├── tags.html  
│   └── theme  
│       ├── css  
│       ├── fonts  
│       ├── js  
│       └── tipuesearch  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将output目录下的文件全部拷贝到本地的username.github.io 路径  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp -R output/*  username.github.io/
cd username.github.io/
git add .
git commit -a -m &amp;#39;init&amp;#39;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开地址： http://username.github.io 查看效果。  &lt;/p&gt;
&lt;h1&gt;利用MakeFile一键部署&lt;/h1&gt;
&lt;p&gt;生成html，拷贝到git本地目录，然后git commit可以写脚本完成。然而在pelican这里有一个现成的MakeFile文件可以用。
修改下MakeFile，我的demo如下：
publish段：增加了cp指令一行，即将生成的html拷贝到本地git路径下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;PUBLISHCONF&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
        cp -R &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/* &lt;span class="k"&gt;$(&lt;/span&gt;GIT_LOCAL_DIR&lt;span class="k"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;github段:没用ghp-import指令，懒得安装这个多余的包。作为弥补，修改了publish段，如上。同时增加cd到git路径指令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
        &lt;span class="c"&gt;#ghp-import -m &amp;quot;Generate Pelican site&amp;quot; -b $(GITHUB_PAGES_BRANCH) $(OUTPUTDIR)&lt;/span&gt;
        &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GIT_LOCAL_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;.&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后用指令make github即可部署。&lt;br /&gt;
这样以后可以专注于写作。  &lt;/p&gt;
&lt;h1&gt;关于搜索功能&lt;/h1&gt;
&lt;p&gt;由于是静态站，所以搜索的实现落在了客户端。&lt;br /&gt;
思路有不外乎：&lt;br /&gt;
1. 解析index.html页面并操作dom元素&lt;br /&gt;
2. 利用插件生成xml/json格式的sitemap，然后ajax请求这些资源并解析，渲染页面。  &lt;/p&gt;
&lt;p&gt;我的实现方式是2，利用插件tipue_json在生成html时附带生成一个json文件。&lt;br /&gt;
拷贝index.html页，命名为search.html，做少量修改（略）, 然后在里面加入下面这段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
$(function(){
        do_search();
});

function getParameterByName(name) {
    name = name.replace(/[\[]/, &amp;quot;\\[&amp;quot;).replace(/[\]]/, &amp;quot;\\]&amp;quot;);
    var regex = new RegExp(&amp;quot;[\\?&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;]&amp;quot; + name + &amp;quot;=([^&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;#]*)&amp;quot;),
        results = regex.exec(location.search);
    return results === null ? &amp;quot;&amp;quot; : decodeURIComponent(results[1].replace(/\+/g, &amp;quot; &amp;quot;));
}

function do_search(){
        var result_tmplate=&amp;quot;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;/article&amp;gt;&lt;/span&gt;&amp;quot;;
        var search_target = getParameterByName(&amp;#39;q&amp;#39;);
        var found_something=false;
        $(&amp;quot;#tipue_search_input&amp;quot;).val(search_target);
        $.ajax({
          dataType: &amp;quot;json&amp;quot;,
          url: &amp;quot;/tipuesearch_content.json&amp;quot;,
          success: function(data){
                console.log(data);

                for(var i=0;i&lt;span class="nt"&gt;&amp;lt;data.pages.length&lt;/span&gt;&lt;span class="err"&gt;;i++)&lt;/span&gt;
                &lt;span class="err"&gt;{&lt;/span&gt;
                        &lt;span class="err"&gt;if(data.pages[i].title.indexOf(search_target)!=-1)&lt;/span&gt;
                        &lt;span class="err"&gt;{&lt;/span&gt;
                                &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="na"&gt;result_html =&lt;/span&gt; &lt;span class="s"&gt;result_tmplate.replace(&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&lt;/span&gt; &lt;span class="err"&gt;data.pages[i].title).replace(&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;,&lt;/span&gt; &lt;span class="err"&gt;data.pages[i].url)&lt;/span&gt;
                                &lt;span class="err"&gt;$(&amp;quot;#search_result&amp;quot;).append(result_html);&lt;/span&gt;
                                &lt;span class="na"&gt;found_something=&lt;/span&gt;&lt;span class="s"&gt;true;&lt;/span&gt;
                        &lt;span class="err"&gt;}&lt;/span&gt;
                &lt;span class="err"&gt;}&lt;/span&gt;
                &lt;span class="err"&gt;if(!found_something)&lt;/span&gt;
                &lt;span class="err"&gt;{&lt;/span&gt;
                        &lt;span class="err"&gt;$(&amp;quot;#search_result&amp;quot;).append(&amp;quot;&amp;lt;h2&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;抱歉! 没有找到任何匹配的文章哦。。。&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;&amp;quot;);
                }
          }
        });
}
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;其他&lt;/h1&gt;
&lt;p&gt;可以根据添加评论系统，第三方图片接入等等。&lt;br /&gt;
ps:关于自带的disqus代码可能不是最新的。需要自己更新下，修改下theme主题插件的相关模板。&lt;br /&gt;
试用了uyan（友言）和disqus，发现ab测试下，uyan快100毫秒。不过发现了一个虫（删掉文章后，相关文章链接仍然被收藏并显示出来了），最后还是选择了disqus。&lt;/p&gt;</summary><category term="github"></category></entry><entry><title>大数据</title><link href="http://tommyu.github.io/big_data.html" rel="alternate"></link><updated>2015-01-05T20:20:00+08:00</updated><author><name>Tommy</name></author><id>tag:tommyu.github.io,2015-01-05:big_data.html</id><summary type="html">&lt;h1&gt;什么是大数据&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;海量数据(G-T级)&lt;/li&gt;
&lt;li&gt;结构化/非结构化数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;来源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;传感器（黑盒子，各种记录仪器）&lt;/li&gt;
&lt;li&gt;日志&lt;/li&gt;
&lt;li&gt;互联网&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;大数据能干嘛&lt;/h2&gt;
&lt;h3&gt;大数据搜索&lt;/h3&gt;
&lt;p&gt;应用:各大搜索引擎&lt;/p&gt;
&lt;h3&gt;大数据分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;改善经营&lt;/li&gt;
&lt;li&gt;提供新的可行的服务&lt;br /&gt;
   *啤酒+尿布&lt;br /&gt;
    这是个大数据经典故事，这里不再重提。&lt;/li&gt;
&lt;li&gt;提供更精准更快的咨询服务&lt;br /&gt;
   基于海量数据和分布式计算，实时提供准确的分析服务。&lt;/li&gt;
&lt;li&gt;优化经营模式 &lt;br /&gt;
   基于海量数据和分布式计算，通过极值（最大/最小）定位出经营操作最佳/最糟糕模式，从而优化经营模式。&lt;/li&gt;
&lt;li&gt;目标客户的更清晰的认识
   基于大数据将目标客户分组，提供更好的针对性的服务，使得利润最大化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;如何实施大数据&lt;/h1&gt;
&lt;h2&gt;大数据收集&amp;amp;整理&amp;amp;存储&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;收集  &lt;/li&gt;
&lt;li&gt;整理&amp;amp;存储
spark:数据存放在内存中&lt;br /&gt;
hbase:数据存储文件系统中&lt;br /&gt;
mongodb:数据存储文件系统中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;大数据分析计算&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;算法&lt;br /&gt;
mapreduce    &lt;/li&gt;
&lt;li&gt;工具&lt;br /&gt;
spark&lt;/li&gt;
&lt;/ul&gt;</summary><category term="big data"></category></entry></feed>