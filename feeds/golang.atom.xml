<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tommy's Notes - golang</title><link href="http://tommyu.github.io/" rel="alternate"></link><link href="http://tommyu.github.io/feeds/golang.atom.xml" rel="self"></link><id>http://tommyu.github.io/</id><updated>2015-12-03T10:20:00+08:00</updated><entry><title>interface</title><link href="http://tommyu.github.io/golang-interface.html" rel="alternate"></link><published>2015-12-03T10:20:00+08:00</published><updated>2015-12-03T10:20:00+08:00</updated><author><name>Tommy.Yu</name></author><id>tag:tommyu.github.io,2015-12-03:/golang-interface.html</id><summary type="html">&lt;p&gt;golang interface&lt;/p&gt;</summary><content type="html">&lt;h1&gt;interface&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// An Expr is an arithmetic expression.
type Expr interface {
    // Eval returns the value of this Expr in the environment env.
    Eval(env Env) float64
    // Check reports errors in this Expr and adds its Vars to the set.
    Check(vars map[Var]bool) error
}
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category></entry></feed>